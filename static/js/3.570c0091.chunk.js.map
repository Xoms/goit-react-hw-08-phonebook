{"version":3,"sources":["components/shared/Button/Button.styles.js","components/shared/Button/Button.jsx","components/shared/Button/index.js","components/shared/Title/Title.styles.js","components/shared/Title/Title.jsx","components/shared/Title/index.js","redux/phonebook/contacts-selectors.js","components/shared/ErrorMessage/ErrorMessage.styles.js","components/shared/ErrorMessage/index.js","components/shared/ErrorMessage/ErrorMessage.jsx","components/ContactsModule/PhonesForm/PhonesForm.jsx","components/ContactsModule/PhonesForm/index.js","components/ContactsModule/ContactsList/ContactsListItem/ContactsListItem.jsx","components/ContactsModule/ContactsList/ContactsListItem/index.js","components/ContactsModule/ContactsList/index.js","components/ContactsModule/ContactsList/ContactsList.jsx","components/ContactsModule/Filter/Filter.jsx","components/ContactsModule/Filter/index.js","pages/Contacts/Contacts.jsx","pages/Contacts/index.js"],"names":["Btn","styled","button","Button","props","type","children","onClick","className","defaultProps","handleClick","StyledTitle","h2","Title","title","getItems","state","contacts","items","getFilter","filter","selectors","getIsLoading","isLoading","getVisibleContacts","createSelector","lowerCaseFilter","toLowerCase","name","includes","getContactById","id","find","el","Err","div","ErrorMessage","content","initialState","number","isExist","PhonesForm","changeHandler","target","setState","value","submitHandler","e","preventDefault","isContactExists","showErrMsg","newRecord","makeRecord","onContactAdd","hideErrMsg","currName","this","some","setTimeout","onSubmit","CSSTransition","in","classNames","appear","unmountOnExit","timeout","htmlFor","onChange","Component","mapDispatchToProps","recordOperations","addContact","connect","selelctors","ContactsListItem","onDelete","ownProps","dispatch","delContact","ContactsList","loading","TransitionGroup","component","map","onFilterChange","filterActions","filterChange","Filter","seclectors","Contacts","Container","isAuthorized","authSelectors","getToken"],"mappings":"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","file":"static/js/3.570c0091.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Btn = styled.button`\r\n    padding: 8px 16px;\r\n    border-radius: 5px;\r\n    background-color: #3f51b5;\r\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n    text-align: center;\r\n    display: inline-block;\r\n    color: #fff;\r\n    border: 0;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n    font-family: inherit;\r\n    font-size: 18px;\r\n    line-height: 24px;\r\n    font-style: normal;\r\n    font-weight: 500;    \r\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\r\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\r\n    &:hover, &:focus {\r\n        background-color: #303f9f;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Btn } from './Button.styles';\r\n\r\nconst Button = (props) => {\r\n  const { type, children, onClick, className } = props\r\n  return (\r\n  <Btn type={type}  onClick={onClick} className={className}> \r\n    {children}\r\n  </Btn>\r\n)};\r\n\r\nButton.propTypes = {\r\n  caption: PropTypes.string,\r\n  handleClick: PropTypes.func,\r\n  type: PropTypes.string,\r\n  className: PropTypes.string\r\n};\r\n\r\nButton.defaultProps = {\r\n  type: 'button',\r\n  className: '',\r\n  handleClick: () => {}\r\n};\r\n\r\nexport default Button;\r\n","import Button from './Button';\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledTitle = styled.h2`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 30px;\r\n    font-weight: 900px;\r\n    margin-bottom: 30px;\r\n    color: #3f51b5;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StyledTitle } from './Title.styles';\r\n\r\nconst Title = ({title}) => (\r\n  <StyledTitle className=\"title\">\r\n    {title}\r\n  </StyledTitle>\r\n);\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nTitle.defaultProps = {\r\n  // bla: 'test',\r\n};\r\n\r\nexport default Title;\r\n","import Title from './Title';\r\n\r\nexport default Title;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getItems = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\n\r\nconst getIsLoading = state => state.contacts.isLoading;\r\n\r\nconst getVisibleContacts = createSelector([getItems, getFilter], (items, filter) => {\r\n  const lowerCaseFilter = filter.toLowerCase();\r\n  return items.filter( ({name}) => name.toLowerCase().includes(lowerCaseFilter) );   \r\n})\r\n\r\n//без реселекта\r\n// const getVisibleContacts = state => {\r\n//   const items = getItems(state);\r\n//   const lowerCaseFilter = getFilter(state).toLowerCase();\r\n//   return items.filter( ({name}) => name.toLowerCase().includes(lowerCaseFilter) );   \r\n// } \r\n\r\n\r\nconst getContactById = createSelector( [(state, id) => id, getItems], (id, items) => {\r\n    return items.find( el => el.id === id)\r\n} )\r\n// без реселекта\r\n// const getContactById = (state, id) => {\r\n//     return getItems(state).find( el => el.id === id)\r\n// }\r\nconst selectors = {getItems, getFilter, getIsLoading, getVisibleContacts, getContactById }\r\nexport default selectors;","import styled from 'styled-components';\n\nexport const Err = styled.div`\n    position: absolute;\n    width: 200px;\n    min-height: 40px;\n    top: 30px;\n    right: 500px;\n    background-color: orangered;\n    color: white;\n    border-radius: 5px;\n    padding: 10px;\n`;\n","import ErrorMessage from './ErrorMessage';\n\nexport default ErrorMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Err } from './ErrorMessage.styles';\n\nconst ErrorMessage = ({content, onClick}) => (\n  <Err className=\"err-msg\" onClick={onClick}>\n    {content}\n  </Err>\n);\n\nErrorMessage.propTypes = {\n  content: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\n\nexport default ErrorMessage;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { connect } from 'react-redux';\nimport recordOperations from \"../../../redux/phonebook/contacts/recordOperations\";\nimport selelctors from \"../../../redux/phonebook/contacts-selectors\";\n\nimport ErrMsg from '../../shared/ErrorMessage';\nimport Button from \"../../shared/Button\";\n\nimport './PhonesForm.styles.scss';\n\nconst initialState = {\n  name: '',\n  number: '',\n  isExist: false\n}\n\nclass PhonesForm extends Component  {\n\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string\n    })).isRequired,\n    onContactAdd: PropTypes.func.isRequired,\n  };\n\n  state = { ...initialState }\n\n  changeHandler = ({target}) => {\n    this.setState({ [target.name]: target.value })\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    \n    if (this.isContactExists(this.state.name)){\n      this.showErrMsg();\n      return;\n    }\n\n    const newRecord = this.makeRecord()\n    this.props.onContactAdd(newRecord);\n    this.setState({ ...initialState })\n  }\n\n\n  isContactExists(currName){\n    return (this.props.contacts.some( ({name}) => name === currName));\n  }\n\n  showErrMsg() {\n    this.setState({ isExist: true });\n    setTimeout(() => this.hideErrMsg(), 2000);\n  }\n\n  hideErrMsg = ()=> {\n    this.setState({ isExist: false });\n  }\n\n  makeRecord(){\n    //const id = uuid(); //теперь делает jsonServer\n    const {name, number} = this.state;\n    return {name, number}\n  }\n\n  render(){\n    const {name, number, isExist} = this.state\n    return (\n      <form className=\"contacts-form\" onSubmit={this.submitHandler}>\n\n        <CSSTransition \n          in={isExist} \n          classNames=\"err\" \n          appear={true}\n          unmountOnExit \n          timeout={250}\n        >\n          <ErrMsg content=\"This person is already in your contacts list\" onClick={this.hideErrMsg}/>\n        </CSSTransition>\n\n        <div className=\"contacts-form__group\">\n          <label className=\"contacts-form__label\" htmlFor=\"contactName\" >Name</label>\n          <input className=\"contacts-form__input\" \n            onChange={this.changeHandler} \n            id=\"contactName\"\n            name=\"name\"\n            value={name}/>\n        </div>\n\n        <div className=\"contacts-form__group\">\n          <label className=\"contacts-form__label\" htmlFor=\"contactNumber\">Number</label>\n          <input \n            className=\"contacts-form__input\" \n            onChange={this.changeHandler} \n            id=\"contactNumber\"\n            name=\"number\"\n            value={number}/>\n        </div>\n\n        <Button type=\"submit\" className=\"contacts-form__submit-btn\">Add contact</Button>       \n      </form>\n    )\n  }  \n};\n\n////////////REDUX////////////\nconst mapStateToProps = state => {\n  return { \n    contacts: selelctors.getItems(state),\n  }\n}\n\nconst mapDispatchToProps = { \n  onContactAdd: recordOperations.addContact,\n}\n// по факту происходит такое\n// const mapDispatchToProps = dispatch => { \n//   return {\n//     onContactAdd: (val) => dispatch(recordActions.addContact(val))\n//   }\n// }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhonesForm);","import PhonesForm from './PhonesForm';\n\nexport default PhonesForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport recordOperations from \"../../../../redux/phonebook/contacts/recordOperations\";\nimport selectors from '../../../../redux/phonebook/contacts-selectors';\n\nimport Button from '../../../shared/Button';\nimport './ContactsListItem.scss';\n\n\nconst ContactsListItem = ({name, number, onDelete}) => {\n  return (\n    <li className=\"contacts-list__item\">\n      <span className=\"contacts-list__item-text\">{name}: {number}</span>\n      <Button type=\"button\" onClick={onDelete} className=\"contacts-list__item-btn\">X</Button>\n    </li>\n\n)};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string, \n  number: PropTypes.string, \n  onDelete:  PropTypes.func.isRequired\n};\nContactsListItem.defaultProps = {\n  name: '',\n  number: '',\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n      ...selectors.getContactById(state, ownProps.id)\n    })\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onDelete: () => dispatch(recordOperations.delContact(ownProps.id))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsListItem);","import ContactsListItem from './ContactsListItem';\n\nexport default ContactsListItem;\n","import ContactsList from './ContactsList';\n\nexport default ContactsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport { connect } from 'react-redux';\nimport selectors from '../../../redux/phonebook/contacts-selectors';\nimport ContactsListItem from './ContactsListItem';\nimport  './ContactsList.scss';\n\n\nconst ContactsList = ({contacts, isLoading}) => {\n\n  const loading = isLoading  && <h2>Loading...</h2>;\n  \n  return (\n  <>\n    {loading}\n  <TransitionGroup component=\"ul\" className=\"contacts-list\">\n    {contacts.map( ({id}) => {\n      return (\n        <CSSTransition key={id}  timeout={250} classNames=\"contacts-items\">\n          <ContactsListItem  id={id}/>\n        </CSSTransition>\n      )\n    })}\n  </TransitionGroup>\n  </>\n)};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string\n  })).isRequired,\n};\n\n\n//////REDUX //////\nconst mapStateToProps = state => {\n  return { \n    contacts: selectors.getVisibleContacts(state),\n    isLoading: selectors.getIsLoading(state),\n   }\n}\n\nexport default connect(mapStateToProps)(ContactsList) ;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport filterActions from \"../../../redux/phonebook/filter/filterActions\";\nimport seclectors from '../../../redux/phonebook/contacts-selectors';\n\nimport './Filter.scss';\n\nconst Filter = ({filter, onFilterChange}) => (\n  <div className=\"filter\">\n    <label htmlFor=\"filterInput\" className=\"filter__label\">Find contacts by name</label>\n    <input \n      type=\"text\" \n      id=\"filterInput\" \n      onChange={(e)=> onFilterChange(e.target.value)}\n      value={filter}\n      className=\"filter__input\"/>\n  </div>\n);\n\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onFilterChange: PropTypes.func.isRequired,\n};\n\n\nconst mapStateToProps = state => ({ \n    filter: seclectors.getFilter(state)\n   })\n\nconst mapDispatchToProps = { \n  onFilterChange: filterActions.filterChange\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import Filter from './Filter';\n\nexport default Filter;\n","import React, { Component } from 'react';\n\nimport { CSSTransition } from 'react-transition-group';\nimport Title from '../../components/shared/Title';\nimport Container from '../../components/shared/Container';\nimport PhonesForm from '../../components/ContactsModule/PhonesForm';\nimport ContactsList from '../../components/ContactsModule/ContactsList';\nimport Filter from '../../components/ContactsModule/Filter';\n\nimport { authSelectors } from '../../redux/auth';\nimport { connect } from 'react-redux';\n\n\nclass Contacts extends Component {\n  // без кастомного роутинга\n  // componentDidMount(){\n  //   this.redirectUnauthorized()\n  // }\n\n  // componentDidUpdate(){\n  //   this.redirectUnauthorized()\n  // }\n\n  // redirectUnauthorized(){\n  //   if(!this.props.isAuthorized){\n  //     this.props.history.replace('/')\n  //   }\n  // }\n\n  render(){\n    return (\n    <Container className=\"container phonebook\">\n          <CSSTransition in={true} \n            appear={true}\n            classNames=\"fade\" \n            unmountOnExit \n            timeout={500}\n          >\n            <Title title=\"Phonebook\"/>\n          </CSSTransition>\n\n          <PhonesForm/>\n          <Title title=\"Contacts\" className=\"main-title\"/>\n          <Filter/>\n          <ContactsList/>\n\n    </Container>\n  )};\n}\nconst mapStateToProps = state => ({\n  isAuthorized: authSelectors.getToken(state)\n})\nexport default connect(mapStateToProps)(Contacts);\n","import Contacts from './Contacts';\n\nexport default Contacts;\n"],"sourceRoot":""}